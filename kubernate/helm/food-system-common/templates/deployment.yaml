{{- define "common.deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deploymentName }}
  labels:
    app: {{ .Values.appLabel }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appLabel }}
  template:
    metadata:
      labels:
        app: {{ .Values.appLabel }}
    spec:
      containers:
        - name: {{ .Values.appLabel }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: {{ .Values.containerPort }}
              protocol: TCP
          env:

        {{- if .Values.appname_enabled }}
            - name: SPRING_APPLICATION_NAME
              value: {{ .Values.appName }}
        {{- end }}


        {{- if .Values.profile_enabled }}
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: SPRING_PROFILES_ACTIVE
        {{- end }}



        {{- if .Values.config_enabled }}
            - name: SPRING_CONFIG_IMPORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: SPRING_CONFIG_IMPORT
        {{- end }}



        {{- if .Values.eureka_enabled }}
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
        {{- end }}

        {{- if .Values.datasource_url_enabled }}
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.dbName }}
        {{- end }}

        {{- if .Values.datasource_password_enabled }}

            - name: SPRING_DATASOURCE_PASSWORD
              value: {{ .Values.database.password }}

        {{- end }}

        {{- if .Values.datasource_username_enabled }}
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.database.username }}
        {{- end }}


        {{- if .Values.rabbitmq_enabled }}
            - name: SPRING_RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: SPRING_RABBITMQ_HOST
        {{- end }}



        {{- if .Values.resouceserver_enabled }}
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: KEYCLOAK_AUTH_URL
        {{- end }}
        {{- if .Values.keyclaok_enabled }}
            - name: KEYCLOAK_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: KEYCLOAK_URL
        {{- end }}



        {{- if .Values.otel_enabled }}
            - name: JAVA_TOOL_OPTIONS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: JAVA_TOOL_OPTIONS
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: OTEL_EXPORTER_OTLP_ENDPOINT
            - name: OTEL_METRICS_EXPORTER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: OTEL_METRICS_EXPORTER
            - name: OTEL_SERVICE_NAME
              value: {{ .Values.appName }}
        {{- end }}



        {{- if .Values.kafka_enabled }}
            - name: SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.configMapName }}
                  key: SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS
        {{- end }}

          readinessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}

        {{- end -}}