# in code if rabbit mq service is fully started after all config server started
# in code if config server fully started after all service will be started
services:
  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloakdb:
    container_name: keycloakdb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: keycloakdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    ports:
      - "8072:8080"
    depends_on:
      keycloakdb:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  userservicedb:
    container_name: userservicedb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: userservicedb

    extends:
      file: common-config.yml
      service: microservice-db-config

  addressservicedb:
    container_name: addressservicedb
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: addressservicedb
    extends:
      file: common-config.yml
      service: microservice-db-config


  configserver:
    image: "atulpatel2001/config-server:latest"
    container_name: config-server
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/liveness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config


  eurekaserver:
    image: "atulpatel2001/eureka-server:latest"
    container_name: eureka-server
    ports:
      - "8073:8073"
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    healthcheck:
      test: "curl --fail --silent localhost:8073/actuator/health/liveness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s

    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"



  user:
    image: "atulpatel2001/user-service:latest"
    container_name: "user-service"
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/liveness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      userservicedb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "user"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://userservicedb:5433/userservicedb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config



  address:
    image: "atulpatel2001/address-server:latest"
    container_name: "address-service"
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/liveness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      addressservicedb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "address"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://addressservicedb:5434/addressservicedb"
    extends:
      file: common-config.yml
      service: microservice-configserver-config


  gatewayserver:
    image: "atulpatel2001/apigateway-sever:latest"
    container_name: gateway-server
    ports:
      - "8074:8074"
    healthcheck:
      test: "curl --fail --silent localhost:8074/actuator/health/liveness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      address:
        condition: service_healthy
      user:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  atulpatel2001:
    driver: "bridge"


#  read:
#    image: grafana/loki:2.9.2
#    command: "-config.file=/etc/loki/config.yaml -target=read"
#    ports:
#      - 3101:3100
#      - 7946
#      - 9095
#    volumes:
#      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
#    depends_on:
#      - minio
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks: &loki-dns
#      atulpatel2001:
#        aliases:
#          - loki
#
#  write:
#    image: grafana/loki:2.9.2
#    command: "-config.file=/etc/loki/config.yaml -target=write"
#    ports:
#      - 3102:3100
#      - 7946
#      - 9095
#    volumes:
#      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    depends_on:
#      - minio
#    networks:
#      <<: *loki-dns
#
#  promtail:
#    image: grafana/promtail:2.9.2
#    volumes:
#      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    command: -config.file=/etc/promtail/config.yaml
#    depends_on:
#      - gateway
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  minio:
#    image: minio/minio
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        mkdir -p /data/loki-data && \
#        mkdir -p /data/loki-ruler && \
#        minio server /data
#    environment:
#      - MINIO_ROOT_USER=loki
#      - MINIO_ROOT_PASSWORD=supersecret
#      - MINIO_PROMETHEUS_AUTH_TYPE=public
#      - MINIO_UPDATE=off
#    ports:
#      - 9000
#    volumes:
#      - ./.data/minio:/data
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#      interval: 15s
#      timeout: 20s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  prometheus:
#    image: prom/prometheus:v2.48.0
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  tempo:
#    image: grafana/tempo
#    container_name: tempo
#    command: -config.file /etc/tempo-config.yml
#    ports:
#      - "3110:3100"
#      - "4317:4317"
#    volumes:
#      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  grafana:
#    image: grafana/grafana:latest
#    environment:
#      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#    depends_on:
#      - gateway
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        /run.sh
#    ports:
#      - "3000:3000"
#    volumes:
#      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  gateway:
#    image: nginx:latest
#    depends_on:
#      - read
#      - write
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        cat <<EOF > /etc/nginx/nginx.conf
#        user  nginx;
#        worker_processes  5;  ## Default: 1
#
#        events {
#          worker_connections   1000;
#        }
#
#        http {
#          resolver 127.0.0.11;
#
#          server {
#            listen             3100;
#
#            location = / {
#              return 200 'OK';
#              auth_basic off;
#            }
#
#            location = /api/prom/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /api/prom/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /api/prom/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /loki/api/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#          }
#        }
#        EOF
#        /docker-entrypoint.sh nginx -g "daemon off;"
#    ports:
#      - "3100:3100"
#    healthcheck:
#      test: [ "CMD", "service", "nginx", "status" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  redis:
#    image: redis
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
#      timeout: 10s
#      retries: 10
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#





